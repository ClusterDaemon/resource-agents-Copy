#!/bin/sh
#
#
#	File copy OCF RA. Copies a file using the "cp" program.
#	Currently only supports a single source and destination
#	file path per invocation.
#
# Copyright (c) 2019 David Allen Hay, LINBIT
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Parameter defaults

# !!!No defaults!!!

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="Copy">
<version>1.0</version>

<longdesc lang="en">
This agent copies a file (using "cp") from a source path to a destination path.

NB: Take care to set the start operation timeout for a bit longer than it should
take to copy this file.
</longdesc>
<shortdesc lang="en">Example sourceless resource agent</shortdesc>

<parameters>
<parameter name="source" unique="1">
<longdesc lang="en">
Source file absolute path
</longdesc>
<shortdesc lang="en">Source file absolute path</shortdesc>
</parameter>

<parameter name="destination" unique="1">
<longdesc lang="en">
Destination absolute file path
</longdesc>
<shortdesc lang="en">Destination absolute file path</shortdesc>
</parameter>

</parameters>

<actions>
<action name="start"        timeout="20s" />
<action name="stop"         timeout="20s" />
<action name="monitor"      timeout="20s" interval="10s" depth="0" />
<action name="reload"       timeout="20s" />
<action name="migrate_to"   timeout="20s" />
<action name="migrate_from" timeout="20s" />
<action name="meta-data"    timeout="5s" />
<action name="validate-all"   timeout="20s" />
</actions>
</resource-agent>
END
}

#######################################################################

copy_usage() {
	cat <<END
usage: $0 {start|stop|monitor|migrate_to|migrate_from|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

copy_start() {
    copy_monitor
    if [ $? =  $OCF_SUCCESS ]; then
	return $OCF_SUCCESS
    fi
    cp ${OCF_RESKEY_source} ${OCF_RESKEY_destination}
}

copy_stop() {
    copy_monitor
#    if [ $? =  $OCF_SUCCESS ]; then
#	rm ${OCF_RESKEY_source}
#    fi
    return $OCF_SUCCESS
}

copy_monitor() {
	# Monitor _MUST!_ differentiate correctly between running
	# (SUCCESS), failed (ERROR) or _cleanly_ stopped (NOT RUNNING).
	# That is THREE sources, not just yes/no.
	
	if [ -f ${OCF_RESKEY_destination} ]; then
	    return $OCF_SUCCESS
	fi
	if false ; then
		return $OCF_ERR_GENERIC
	fi

	if ! ocf_is_probe && [ "$__OCF_ACTION" = "monitor" ]; then
		# set exit string only when NOT_RUNNING occurs during an actual monitor operation.
		ocf_exit_reason "Destination file not found"
	fi
	return $OCF_NOT_RUNNING
}

copy_validate() {
    
    # Is the destination directory writable? 
    destination_dir=`dirname "$OCF_RESKEY_destination"`
    touch "$destination_dir/$$"
    if [ $? != 0 ]; then
	ocf_exit_reason "Destination directory \"$OCF_RESKEY_destination\" is not writable"
	return $OCF_ERR_ARGS
    fi
    rm "$destination_dir/$$"

    return $OCF_SUCCESS
}

case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
start)		copy_start;;
stop)		copy_stop;;
monitor)	copy_monitor;;
migrate_to)	ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} to ${OCF_RESKEY_CRM_meta_migrate_target}."
	        copy_stop
		;;
migrate_from)	ocf_log info "Migrating ${OCF_RESOURCE_INSTANCE} from ${OCF_RESKEY_CRM_meta_migrate_source}."
	        copy_start
		;;
reload)		ocf_log info "Reloading ${OCF_RESOURCE_INSTANCE} ..."
		;;
validate-all)	copy_validate;;
usage|help)	copy_usage
		exit $OCF_SUCCESS
		;;
*)		copy_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc

